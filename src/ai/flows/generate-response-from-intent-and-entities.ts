'use server';
/**
 * @fileOverview This file defines a Genkit flow that takes user input, detects the intent, extracts entities,
 * and generates a response using the Gemini Pro API.
 *
 * - generateResponseFromIntentAndEntities - A function that orchestrates intent detection, entity extraction, and response generation.
 * - GenerateResponseInput - The input type for the generateResponseFromIntentAndEntities function.
 * - GenerateResponseOutput - The return type for the generateResponseFromIntentAndEntities function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { initialIntentDetection } from './initial-intent-detection';
import { extractEntities } from './extract-entities-from-message';


const GenerateResponseInputSchema = z.object({
  userInput: z.string().describe('The user input text.'),
});
export type GenerateResponseInput = z.infer<typeof GenerateResponseInputSchema>;

const GenerateResponseOutputSchema = z.object({
  response: z.string().describe('The response generated by the LLM.'),
});
export type GenerateResponseOutput = z.infer<typeof GenerateResponseOutputSchema>;

export async function generateResponseFromIntentAndEntities(
  input: GenerateResponseInput
): Promise<GenerateResponseOutput> {
  return generateResponseFlow(input);
}

const detectIntentTool = ai.defineTool({
  name: 'detectIntent',
  description: 'Detects the intent of the user input.',
  inputSchema: z.object({
    text: z.string().describe('The text to analyze for intent.'),
  }),
  outputSchema: z.object({
    intent: z.string().describe('The identified intent of the message.'),
    confidence: z.number().describe('The confidence level of the intent detection.'),
  }),
},
async (input) => {
    return await initialIntentDetection({ message: input.text });
  }
);

const extractEntitiesTool = ai.defineTool({
  name: 'extractEntities',
  description: 'Extracts entities from the user input.',
  inputSchema: z.object({
    text: z.string().describe('The text to extract entities from.'),
  }),
  outputSchema: z.object({
    entities: z
    .array(z.string())
    .describe('The extracted entities from the user message.'),
  }),
},
async (input) => {
    return await extractEntities({ message: input.text });
  }
);

const generateResponsePrompt = ai.definePrompt({
  name: 'generateResponsePrompt',
  input: {schema: GenerateResponseInputSchema},
  output: {schema: GenerateResponseOutputSchema},
  tools: [detectIntentTool, extractEntitiesTool],
  prompt: `You are a helpful AI assistant. 

  The user input is: {{{userInput}}}

  Use the detectIntent and extractEntities tools to understand the user input and generate a response.
  `,
});

const generateResponseFlow = ai.defineFlow(
  {
    name: 'generateResponseFlow',
    inputSchema: GenerateResponseInputSchema,
    outputSchema: GenerateResponseOutputSchema,
  },
  async input => {
    const {output} = await generateResponsePrompt(input);
    if (!output) {
      throw new Error("AI failed to generate a response.");
    }
    return output;
  }
);

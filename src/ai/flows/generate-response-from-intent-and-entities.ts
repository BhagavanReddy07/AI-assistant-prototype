'use server';
/**
 * @fileOverview This file defines a Genkit flow that takes user input, detects the intent, extracts entities,
 * and generates a response using the Gemini Pro API.
 *
 * - generateResponseFromIntentAndEntities - A function that orchestrates intent detection, entity extraction, and response generation.
 * - GenerateResponseInput - The input type for the generateResponseFromIntentAndEntities function.
 * - GenerateResponseOutput - The return type for the generateResponseFromIntentAndEntities function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { initialIntentDetection } from './initial-intent-detection';
import { extractEntities } from './extract-entities-from-message';


const GenerateResponseInputSchema = z.object({
  userInput: z.string().describe('The user input text.'),
});
export type GenerateResponseInput = z.infer<typeof GenerateResponseInputSchema>;

const GenerateResponseOutputSchema = z.object({
  response: z.string().describe('The response generated by the LLM.'),
});
export type GenerateResponseOutput = z.infer<typeof GenerateResponseOutputSchema>;

export async function generateResponseFromIntentAndEntities(
  input: GenerateResponseInput
): Promise<GenerateResponseOutput> {
  return generateResponseFlow(input);
}

const manageTasksTool = ai.defineTool({
    name: 'manageTasks',
    description: 'Use this tool to manage tasks, reminders, and alarms. You can add, remove, or view them.',
    inputSchema: z.object({
        operation: z.enum(['add', 'remove', 'view']),
        task: z.object({
            type: z.enum(['Task', 'Reminder', 'Alarm']),
            content: z.string(),
            time: z.string().optional().describe('The time for the task in ISO 8601 format, e.g., 2024-08-15T14:00:00'),
        }).optional(),
    }),
    outputSchema: z.string(),
}, async ({ operation, task }) => {
    if (operation === 'add' && task) {
        // In a real app, you'd save this to a database.
        // For now, we're acknowledging the task has been "added".
        console.log('Adding task:', task);
        return `Task "${task.content}" has been added successfully.`;
    }
    return "This functionality is in development.";
});


const generateResponsePrompt = ai.definePrompt({
  name: 'generateResponsePrompt',
  input: {schema: GenerateResponseInputSchema},
  output: {schema: GenerateResponseOutputSchema},
  tools: [manageTasksTool],
  prompt: `You are a helpful AI assistant named SABA. Your role is to assist the user with their requests.

  If the user asks to set a reminder, alarm, or create a task, use the manageTasks tool.
  
  The user input is: {{{userInput}}}
  `,
});

const generateResponseFlow = ai.defineFlow(
  {
    name: 'generateResponseFlow',
    inputSchema: GenerateResponseInputSchema,
    outputSchema: GenerateResponseOutputSchema,
  },
  async input => {
    const {output} = await generateResponsePrompt(input);
    if (!output) {
      throw new Error("AI failed to generate a response.");
    }
    return output;
  }
);

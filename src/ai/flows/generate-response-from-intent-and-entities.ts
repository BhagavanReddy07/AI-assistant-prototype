'use server';
/**
 * @fileOverview This file defines a Genkit flow that takes user input, detects the intent, extracts entities,
 * and generates a response using the Gemini Pro API.
 *
 * - generateResponseFromIntentAndEntities - A function that orchestrates intent detection, entity extraction, and response generation.
 * - GenerateResponseInput - The input type for the generateResponseFromIntentAndEntities function.
 * - GenerateResponseOutput - The return type for the generateResponseFromIntentAndEntities function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { Task } from '@/lib/types';


const GenerateResponseInputSchema = z.object({
  userInput: z.string().describe('The user input text.'),
});
export type GenerateResponseInput = z.infer<typeof GenerateResponseInputSchema>;

const GenerateResponseOutputSchema = z.object({
  response: z.string().describe('The response generated by the LLM.'),
  task: z.object({
    type: z.enum(['Task', 'Reminder', 'Alarm']),
    content: z.string(),
    time: z.string().optional(),
  }).nullable().describe('The task object if a task was created.'),
});
export type GenerateResponseOutput = z.infer<typeof GenerateResponseOutputSchema>;

export async function generateResponseFromIntentAndEntities(
  input: GenerateResponseInput
): Promise<GenerateResponseOutput> {
  return generateResponseFlow(input);
}

const taskSchema = z.object({
    type: z.enum(['Task', 'Reminder', 'Alarm']),
    content: z.string(),
    time: z.string().optional().describe('The time for the task in ISO 8601 format, e.g., 2024-08-15T14:00:00'),
});

const manageTasksTool = ai.defineTool({
    name: 'manageTasks',
    description: 'Use this tool to manage tasks, reminders, and alarms. You can add, remove, or view them.',
    inputSchema: z.object({
        operation: z.enum(['add', 'remove', 'view']),
        task: taskSchema.optional(),
    }),
    outputSchema: taskSchema.nullable(),
}, async ({ operation, task }) => {
    if (operation === 'add' && task) {
        console.log('Adding task via tool:', task);
        // This tool just returns the task object. The caller will handle saving it.
        return task;
    }
    return null;
});


const generateResponsePrompt = ai.definePrompt({
  name: 'generateResponsePrompt',
  input: {
    schema: z.object({
      userInput: z.string(),
    }),
  },
  tools: [manageTasksTool],
  prompt: `You are a helpful AI assistant named SABA. Your role is to assist the user with their requests.

If the user asks to set a reminder, alarm, or create a task, use the manageTasks tool.
- The 'type' of the task should be 'Task', 'Reminder', or 'Alarm' based on the user's request.
- The 'content' of the task should be a concise description of what the user wants to do (e.g., "Call mom", "Finish project report").
- If a time is mentioned, include it in the 'time' field.

When you use the tool to add a task, respond to the user with a simple confirmation like "OK, I've added [task content]." or "Reminder set." Do not output JSON.

The user input is: {{{userInput}}}
  `,
});

const generateResponseFlow = ai.defineFlow(
  {
    name: 'generateResponseFlow',
    inputSchema: GenerateResponseInputSchema,
    outputSchema: GenerateResponseOutputSchema,
  },
  async input => {
    const llmResponse = await generateResponsePrompt(input);
    
    let task = null;
    if (llmResponse.toolRequest) {
        // Find the output of the manageTasks tool call
        const taskToolOutput = llmResponse.toolRequest.tool.output;
        if (taskToolOutput) {
            task = taskToolOutput as Omit<Task, 'id'>;
        }
    }

    const output: GenerateResponseOutput = {
        response: llmResponse.text,
        task: task,
    };

    if (!output.response) {
      throw new Error("AI failed to generate a response.");
    }
    return output;
  }
);
